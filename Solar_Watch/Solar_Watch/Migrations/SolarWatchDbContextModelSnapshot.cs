// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Solar_Watch.Services;

#nullable disable

namespace Solar_Watch.Migrations
{
    [DbContext(typeof(SolarWatchDbContext))]
    partial class SolarWatchDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Solar_Watch.Model.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SunriseSunsetId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SunriseSunsetId")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Solar_Watch.Model.SunriseSunset", b =>
                {
                    b.Property<int>("SunriseSunsetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SunriseSunsetId"));

                    b.Property<DateTime>("Sunrise")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Sunset")
                        .HasColumnType("datetime2");

                    b.HasKey("SunriseSunsetId");

                    b.ToTable("SunriseSunsets");
                });

            modelBuilder.Entity("Solar_Watch.Model.City", b =>
                {
                    b.HasOne("Solar_Watch.Model.SunriseSunset", "SunriseSunset")
                        .WithOne("City")
                        .HasForeignKey("Solar_Watch.Model.City", "SunriseSunsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Solar_Watch.Model.GeoCoordinates", "Coordinates", b1 =>
                        {
                            b1.Property<int>("CityId")
                                .HasColumnType("int");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("CityId");

                            b1.ToTable("Cities");

                            b1.WithOwner()
                                .HasForeignKey("CityId");
                        });

                    b.Navigation("Coordinates")
                        .IsRequired();

                    b.Navigation("SunriseSunset");
                });

            modelBuilder.Entity("Solar_Watch.Model.SunriseSunset", b =>
                {
                    b.Navigation("City")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
